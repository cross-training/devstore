version: "3"
networks:
  backend:
  frontend:
services:
  tracing-server:
    image: openzipkin/zipkin
    container_name: tracing-server
    environment:
    - JAVA_OPTS=-XX:+UnlockExperimentalVMOptions -Djava.security.egd=file:/dev/./urandom
    ports:
     - 9411:9411
    networks:
      - backend
      - frontend

  config-server:
    image: flaviorita/devstore-config:0.0.7   
    container_name: config-server
    restart: always
    environment:
      - CONFIG_SERVICE_USERNAME=devstore
      - CONFIG_SERVICE_PASSWORD=secr3t
      - LOGGING_SERVICE_URI=http://tracing-server:9411      
    healthcheck:
      test: ["CMD", "curl", "-I", "http://localhost:8888/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
     - 8888:8888
    networks:
      - backend
  
  discovery-server:
    image: flaviorita/devstore-discovery:0.0.8
    container_name: discovery-server
    environment:
      - CONFIG_SERVICE_URI=http://config-server:8888
      - CONFIG_SERVICE_USERNAME=devstore
      - CONFIG_SERVICE_PASSWORD=secr3t
      - LOGGING_SERVICE_URI=http://tracing-server:9411       
    healthcheck:
      test: ["CMD", "curl", "-I", "http://localhost:8761/actuator/health"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      config-server:
        condition: service_healthy
    ports:
     - 8761:8761
    networks:
      - backend

  api-gateway:
    image: flaviorita/devstore-gateway:0.0.2
    container_name: api-gateway
    environment:
      - CONFIG_SERVICE_URI=http://config-server:8888
      - CONFIG_SERVICE_USERNAME=devstore
      - CONFIG_SERVICE_PASSWORD=secr3t
      - DISCOVERY_SERVICE_URI=http://discovery-server:8761/eureka/
      - LOGGING_SERVICE_URI=http://tracing-server:9411       
    healthcheck:
      test: ["CMD", "curl", "-I", "http://localhost:8080/actuator/health"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy  
    ports:
     - 8080:8080
    networks:
      - backend
      - frontend     

  postgres:
    container_name: postgres
    image: postgres:16-alpine
    restart: always
    environment:
      - POSTGRES_DB=devstore    
      - POSTGRES_USER=devstore
      - POSTGRES_PASSWORD=devstore
    ports:
      - 5432:5432  
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "devstore" ]
      interval: 3s
      timeout: 1s
      retries: 10  
  # backend:
  #   depends_on:
  #     - postgres
  #   image: flaviorita/devstore/backend:0.0.4
  #   restart: always
  #   deploy:
  #     replicas: 3
  #     resources:        
  #       limits:
  #         cpus: '0.25'
  #         memory: 1G
  #       reservations:
  #         cpus: '0.1'
  #         memory: 500M    
  #   environment:
  #     DB_URL: jdbc:postgresql://postgres:5432/devstore
  #     DB_USER: devstore
  #     DB_PASSWORD: devstore
  #   networks:
  #     - frontend
  #     - backend          
  #   healthcheck:
  #     test: curl --fail http://localhost:8080/actuator/health || exit 1
  #     interval: 10s
  #     retries: 3
  #     start_period: 30s
  #     timeout: 5s
  # nginx:
  #   depends_on:
  #     - backend  
  #   container_name: nginx
  #   image: nginx:latest     
  #   ports:
  #     - 8081:8081
  #   expose:
  #     - 8081  
  #   networks:
  #     - backend
  #     - frontend
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro        
  prometheus:
    image: prom/prometheus:v2.20.1
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus      
    ports:
      - 9090:9090
    expose:
      - 9090
    networks:
      - backend
      - frontend
  grafana:
    depends_on:
      - prometheus
    image: grafana/grafana:7.1.5
    container_name: grafana    
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - 3000:3000
    expose:
      - 3000
    networks:
      - frontend
    volumes:      
      - ./grafana/provisioning:/etc/grafana/provisioning  